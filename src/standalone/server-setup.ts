// GENERATED CODE -- DO NOT EDIT!
// Generated by generate-server-setup.mjs
import * as grpc from "@grpc/grpc-js"
import * as proto from "@/shared/proto"
import { Controller } from "../core/controller"
import { GrpcHandlerWrapper, GrpcStreamingResponseHandlerWrapper } from "./grpc-types"

// Account Service
import { accountLoginClicked } from "../core/controller/account/accountLoginClicked"
import { accountLogoutClicked } from "../core/controller/account/accountLogoutClicked"
import { subscribeToAuthCallback } from "../core/controller/account/subscribeToAuthCallback"

// Browser Service
import { getBrowserConnectionInfo } from "../core/controller/browser/getBrowserConnectionInfo"
import { testBrowserConnection } from "../core/controller/browser/testBrowserConnection"
import { discoverBrowser } from "../core/controller/browser/discoverBrowser"
import { getDetectedChromePath } from "../core/controller/browser/getDetectedChromePath"
import { updateBrowserSettings } from "../core/controller/browser/updateBrowserSettings"
import { relaunchChromeDebugMode } from "../core/controller/browser/relaunchChromeDebugMode"

// Checkpoints Service
import { checkpointDiff } from "../core/controller/checkpoints/checkpointDiff"
import { checkpointRestore } from "../core/controller/checkpoints/checkpointRestore"

// File Service
import { copyToClipboard } from "../core/controller/file/copyToClipboard"
import { openFile } from "../core/controller/file/openFile"
import { openImage } from "../core/controller/file/openImage"
import { openMention } from "../core/controller/file/openMention"
import { deleteRuleFile } from "../core/controller/file/deleteRuleFile"
import { createRuleFile } from "../core/controller/file/createRuleFile"
import { searchCommits } from "../core/controller/file/searchCommits"
import { selectImages } from "../core/controller/file/selectImages"
import { selectFiles } from "../core/controller/file/selectFiles"
import { getRelativePaths } from "../core/controller/file/getRelativePaths"
import { searchFiles } from "../core/controller/file/searchFiles"
import { toggleClineRule } from "../core/controller/file/toggleClineRule"
import { toggleCursorRule } from "../core/controller/file/toggleCursorRule"
import { toggleWindsurfRule } from "../core/controller/file/toggleWindsurfRule"
import { refreshRules } from "../core/controller/file/refreshRules"
import { openTaskHistory } from "../core/controller/file/openTaskHistory"

// Mcp Service
import { toggleMcpServer } from "../core/controller/mcp/toggleMcpServer"
import { updateMcpTimeout } from "../core/controller/mcp/updateMcpTimeout"
import { addRemoteMcpServer } from "../core/controller/mcp/addRemoteMcpServer"
import { downloadMcp } from "../core/controller/mcp/downloadMcp"
import { restartMcpServer } from "../core/controller/mcp/restartMcpServer"
import { deleteMcpServer } from "../core/controller/mcp/deleteMcpServer"
import { toggleToolAutoApprove } from "../core/controller/mcp/toggleToolAutoApprove"
import { refreshMcpMarketplace } from "../core/controller/mcp/refreshMcpMarketplace"
import { openMcpSettings } from "../core/controller/mcp/openMcpSettings"
import { subscribeToMcpMarketplaceCatalog } from "../core/controller/mcp/subscribeToMcpMarketplaceCatalog"

// Models Service
import { getOllamaModels } from "../core/controller/models/getOllamaModels"
import { getLmStudioModels } from "../core/controller/models/getLmStudioModels"
import { getVsCodeLmModels } from "../core/controller/models/getVsCodeLmModels"
import { refreshOpenRouterModels } from "../core/controller/models/refreshOpenRouterModels"
import { refreshOpenAiModels } from "../core/controller/models/refreshOpenAiModels"
import { refreshRequestyModels } from "../core/controller/models/refreshRequestyModels"

// Slash Service
import { reportBug } from "../core/controller/slash/reportBug"
import { condense } from "../core/controller/slash/condense"

// State Service
import { getLatestState } from "../core/controller/state/getLatestState"
import { subscribeToState } from "../core/controller/state/subscribeToState"
import { toggleFavoriteModel } from "../core/controller/state/toggleFavoriteModel"
import { resetState } from "../core/controller/state/resetState"
import { togglePlanActMode } from "../core/controller/state/togglePlanActMode"
import { updateTerminalConnectionTimeout } from "../core/controller/state/updateTerminalConnectionTimeout"
import { updateAutoApprovalSettings } from "../core/controller/state/updateAutoApprovalSettings"

// Task Service
import { cancelTask } from "../core/controller/task/cancelTask"
import { clearTask } from "../core/controller/task/clearTask"
import { getTotalTasksSize } from "../core/controller/task/getTotalTasksSize"
import { deleteTasksWithIds } from "../core/controller/task/deleteTasksWithIds"
import { newTask } from "../core/controller/task/newTask"
import { showTaskWithId } from "../core/controller/task/showTaskWithId"
import { exportTaskWithId } from "../core/controller/task/exportTaskWithId"
import { toggleTaskFavorite } from "../core/controller/task/toggleTaskFavorite"
import { deleteNonFavoritedTasks } from "../core/controller/task/deleteNonFavoritedTasks"
import { getTaskHistory } from "../core/controller/task/getTaskHistory"
import { askResponse } from "../core/controller/task/askResponse"
import { taskFeedback } from "../core/controller/task/taskFeedback"
import { taskCompletionViewChanges } from "../core/controller/task/taskCompletionViewChanges"

// Ui Service
import { scrollToSettings } from "../core/controller/ui/scrollToSettings"
import { onDidShowAnnouncement } from "../core/controller/ui/onDidShowAnnouncement"
import { subscribeToAddToInput } from "../core/controller/ui/subscribeToAddToInput"
import { subscribeToMcpButtonClicked } from "../core/controller/ui/subscribeToMcpButtonClicked"
import { subscribeToHistoryButtonClicked } from "../core/controller/ui/subscribeToHistoryButtonClicked"
import { subscribeToChatButtonClicked } from "../core/controller/ui/subscribeToChatButtonClicked"
import { subscribeToAccountButtonClicked } from "../core/controller/ui/subscribeToAccountButtonClicked"
import { subscribeToSettingsButtonClicked } from "../core/controller/ui/subscribeToSettingsButtonClicked"
import { subscribeToPartialMessage } from "../core/controller/ui/subscribeToPartialMessage"

// Web Service
import { checkIsImageUrl } from "../core/controller/web/checkIsImageUrl"
import { fetchOpenGraphData } from "../core/controller/web/fetchOpenGraphData"
import { openInBrowser } from "../core/controller/web/openInBrowser"

export function addServices(
	server: grpc.Server,
	proto: any,
	controller: Controller,
	wrapper: GrpcHandlerWrapper,
	wrapStreamingResponse: GrpcStreamingResponseHandlerWrapper,
): void {
    // Account Service
    server.addService(proto.codai.AccountService.service, {
         accountLoginClicked: wrapper<proto.codai.EmptyRequest,proto.codai.String>(accountLoginClicked, controller),
         accountLogoutClicked: wrapper<proto.codai.EmptyRequest,proto.codai.Empty>(accountLogoutClicked, controller),
        subscribeToAuthCallback: wrapStreamingResponse<proto.codai.EmptyRequest,void>(subscribeToAuthCallback, controller),
    });

    // Browser Service
    server.addService(proto.codai.BrowserService.service, {
         getBrowserConnectionInfo: wrapper<proto.codai.EmptyRequest,proto.codai.BrowserConnectionInfo>(getBrowserConnectionInfo, controller),
         testBrowserConnection: wrapper<proto.codai.StringRequest,proto.codai.BrowserConnection>(testBrowserConnection, controller),
         discoverBrowser: wrapper<proto.codai.EmptyRequest,proto.codai.BrowserConnection>(discoverBrowser, controller),
         getDetectedChromePath: wrapper<proto.codai.EmptyRequest,proto.codai.ChromePath>(getDetectedChromePath, controller),
         updateBrowserSettings: wrapper<proto.codai.UpdateBrowserSettingsRequest,proto.codai.Boolean>(updateBrowserSettings, controller),
         relaunchChromeDebugMode: wrapper<proto.codai.EmptyRequest,proto.codai.String>(relaunchChromeDebugMode, controller),
    });

    // Checkpoints Service
    server.addService(proto.codai.CheckpointsService.service, {
         checkpointDiff: wrapper<proto.codai.Int64Request,proto.codai.Empty>(checkpointDiff, controller),
         checkpointRestore: wrapper<proto.codai.CheckpointRestoreRequest,proto.codai.Empty>(checkpointRestore, controller),
    });

    // File Service
    server.addService(proto.codai.FileService.service, {
         copyToClipboard: wrapper<proto.codai.StringRequest,proto.codai.Empty>(copyToClipboard, controller),
         openFile: wrapper<proto.codai.StringRequest,proto.codai.Empty>(openFile, controller),
         openImage: wrapper<proto.codai.StringRequest,proto.codai.Empty>(openImage, controller),
         openMention: wrapper<proto.codai.StringRequest,proto.codai.Empty>(openMention, controller),
         deleteRuleFile: wrapper<proto.codai.RuleFileRequest,proto.codai.RuleFile>(deleteRuleFile, controller),
         createRuleFile: wrapper<proto.codai.RuleFileRequest,proto.codai.RuleFile>(createRuleFile, controller),
         searchCommits: wrapper<proto.codai.StringRequest,proto.codai.GitCommits>(searchCommits, controller),
         selectImages: wrapper<proto.codai.EmptyRequest,proto.codai.StringArray>(selectImages, controller),
         selectFiles: wrapper<proto.codai.BooleanRequest,proto.codai.StringArrays>(selectFiles, controller),
         getRelativePaths: wrapper<proto.codai.RelativePathsRequest,proto.codai.RelativePaths>(getRelativePaths, controller),
         searchFiles: wrapper<proto.codai.FileSearchRequest,proto.codai.FileSearchResults>(searchFiles, controller),
         toggleClineRule: wrapper<proto.codai.ToggleClineRuleRequest,proto.codai.ToggleClineRules>(toggleClineRule, controller),
         toggleCursorRule: wrapper<proto.codai.ToggleCursorRuleRequest,proto.codai.ClineRulesToggles>(toggleCursorRule, controller),
         toggleWindsurfRule: wrapper<proto.codai.ToggleWindsurfRuleRequest,proto.codai.ClineRulesToggles>(toggleWindsurfRule, controller),
         refreshRules: wrapper<proto.codai.EmptyRequest,proto.codai.RefreshedRules>(refreshRules, controller),
         openTaskHistory: wrapper<proto.codai.StringRequest,proto.codai.Empty>(openTaskHistory, controller),
    });

    // Mcp Service
    server.addService(proto.codai.McpService.service, {
         toggleMcpServer: wrapper<proto.codai.ToggleMcpServerRequest,proto.codai.McpServers>(toggleMcpServer, controller),
         updateMcpTimeout: wrapper<proto.codai.UpdateMcpTimeoutRequest,proto.codai.McpServers>(updateMcpTimeout, controller),
         addRemoteMcpServer: wrapper<proto.codai.AddRemoteMcpServerRequest,proto.codai.McpServers>(addRemoteMcpServer, controller),
         downloadMcp: wrapper<proto.codai.StringRequest,proto.codai.Empty>(downloadMcp, controller),
         restartMcpServer: wrapper<proto.codai.StringRequest,proto.codai.McpServers>(restartMcpServer, controller),
         deleteMcpServer: wrapper<proto.codai.StringRequest,proto.codai.McpServers>(deleteMcpServer, controller),
         toggleToolAutoApprove: wrapper<proto.codai.ToggleToolAutoApproveRequest,proto.codai.McpServers>(toggleToolAutoApprove, controller),
         refreshMcpMarketplace: wrapper<proto.codai.EmptyRequest,proto.codai.McpMarketplaceCatalog>(refreshMcpMarketplace, controller),
         openMcpSettings: wrapper<proto.codai.EmptyRequest,proto.codai.Empty>(openMcpSettings, controller),
        subscribeToMcpMarketplaceCatalog: wrapStreamingResponse<proto.codai.EmptyRequest,void>(subscribeToMcpMarketplaceCatalog, controller),
    });

    // Models Service
    server.addService(proto.codai.ModelsService.service, {
         getOllamaModels: wrapper<proto.codai.StringRequest,proto.codai.StringArray>(getOllamaModels, controller),
         getLmStudioModels: wrapper<proto.codai.StringRequest,proto.codai.StringArray>(getLmStudioModels, controller),
         getVsCodeLmModels: wrapper<proto.codai.EmptyRequest,proto.codai.VsCodeLmModelsArray>(getVsCodeLmModels, controller),
         refreshOpenRouterModels: wrapper<proto.codai.EmptyRequest,proto.codai.OpenRouterCompatibleModelInfo>(refreshOpenRouterModels, controller),
         refreshOpenAiModels: wrapper<proto.codai.OpenAiModelsRequest,proto.codai.StringArray>(refreshOpenAiModels, controller),
         refreshRequestyModels: wrapper<proto.codai.EmptyRequest,proto.codai.OpenRouterCompatibleModelInfo>(refreshRequestyModels, controller),
    });

    // Slash Service
    server.addService(proto.codai.SlashService.service, {
         reportBug: wrapper<proto.codai.StringRequest,proto.codai.Empty>(reportBug, controller),
         condense: wrapper<proto.codai.StringRequest,proto.codai.Empty>(condense, controller),
    });

    // State Service
    server.addService(proto.codai.StateService.service, {
         getLatestState: wrapper<proto.codai.EmptyRequest,proto.codai.State>(getLatestState, controller),
        subscribeToState: wrapStreamingResponse<proto.codai.EmptyRequest,void>(subscribeToState, controller),
         toggleFavoriteModel: wrapper<proto.codai.StringRequest,proto.codai.Empty>(toggleFavoriteModel, controller),
         resetState: wrapper<proto.codai.EmptyRequest,proto.codai.Empty>(resetState, controller),
         togglePlanActMode: wrapper<proto.codai.TogglePlanActModeRequest,proto.codai.Empty>(togglePlanActMode, controller),
         updateTerminalConnectionTimeout: wrapper<proto.codai.Int64Request,proto.codai.Int64>(updateTerminalConnectionTimeout, controller),
         updateAutoApprovalSettings: wrapper<proto.codai.AutoApprovalSettingsRequest,proto.codai.Empty>(updateAutoApprovalSettings, controller),
    });

    // Task Service
    server.addService(proto.codai.TaskService.service, {
         cancelTask: wrapper<proto.codai.EmptyRequest,proto.codai.Empty>(cancelTask, controller),
         clearTask: wrapper<proto.codai.EmptyRequest,proto.codai.Empty>(clearTask, controller),
         getTotalTasksSize: wrapper<proto.codai.EmptyRequest,proto.codai.Int64>(getTotalTasksSize, controller),
         deleteTasksWithIds: wrapper<proto.codai.StringArrayRequest,proto.codai.Empty>(deleteTasksWithIds, controller),
         newTask: wrapper<proto.codai.NewTaskRequest,proto.codai.Empty>(newTask, controller),
         showTaskWithId: wrapper<proto.codai.StringRequest,proto.codai.TaskResponse>(showTaskWithId, controller),
         exportTaskWithId: wrapper<proto.codai.StringRequest,proto.codai.Empty>(exportTaskWithId, controller),
         toggleTaskFavorite: wrapper<proto.codai.TaskFavoriteRequest,proto.codai.Empty>(toggleTaskFavorite, controller),
         deleteNonFavoritedTasks: wrapper<proto.codai.EmptyRequest,proto.codai.DeleteNonFavoritedTasksResults>(deleteNonFavoritedTasks, controller),
         getTaskHistory: wrapper<proto.codai.GetTaskHistoryRequest,proto.codai.TaskHistoryArray>(getTaskHistory, controller),
         askResponse: wrapper<proto.codai.AskResponseRequest,proto.codai.Empty>(askResponse, controller),
         taskFeedback: wrapper<proto.codai.StringRequest,proto.codai.Empty>(taskFeedback, controller),
         taskCompletionViewChanges: wrapper<proto.codai.Int64Request,proto.codai.Empty>(taskCompletionViewChanges, controller),
    });

    // Ui Service
    server.addService(proto.codai.UiService.service, {
         scrollToSettings: wrapper<proto.codai.StringRequest,proto.codai.Empty>(scrollToSettings, controller),
         onDidShowAnnouncement: wrapper<proto.codai.EmptyRequest,proto.codai.Boolean>(onDidShowAnnouncement, controller),
        subscribeToAddToInput: wrapStreamingResponse<proto.codai.EmptyRequest,void>(subscribeToAddToInput, controller),
        subscribeToMcpButtonClicked: wrapStreamingResponse<proto.codai.WebviewProviderTypeRequest,void>(subscribeToMcpButtonClicked, controller),
        subscribeToHistoryButtonClicked: wrapStreamingResponse<proto.codai.WebviewProviderTypeRequest,void>(subscribeToHistoryButtonClicked, controller),
        subscribeToChatButtonClicked: wrapStreamingResponse<proto.codai.EmptyRequest,void>(subscribeToChatButtonClicked, controller),
        subscribeToAccountButtonClicked: wrapStreamingResponse<proto.codai.EmptyRequest,void>(subscribeToAccountButtonClicked, controller),
        subscribeToSettingsButtonClicked: wrapStreamingResponse<proto.codai.WebviewProviderTypeRequest,void>(subscribeToSettingsButtonClicked, controller),
        subscribeToPartialMessage: wrapStreamingResponse<proto.codai.EmptyRequest,void>(subscribeToPartialMessage, controller),
    });

    // Web Service
    server.addService(proto.codai.WebService.service, {
         checkIsImageUrl: wrapper<proto.codai.StringRequest,proto.codai.IsImageUrl>(checkIsImageUrl, controller),
         fetchOpenGraphData: wrapper<proto.codai.StringRequest,proto.codai.OpenGraphData>(fetchOpenGraphData, controller),
         openInBrowser: wrapper<proto.codai.StringRequest,proto.codai.Empty>(openInBrowser, controller),
    });

}
